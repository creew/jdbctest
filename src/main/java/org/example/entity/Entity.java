package org.example.entity;

import org.example.annotation.JdbcAutoGenerated;
import org.example.annotation.JdbcField;
import org.example.annotation.JdbcNotNull;
import org.example.exception.EntityException;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

public class Entity {
    public Object getValue(String name) throws NoSuchFieldException, IllegalAccessException {
        Class<?> clazz = this.getClass();
        Field field = clazz.getDeclaredField(name);
        field.setAccessible(true);
        return field.get(this);
    }

    public void setValue(String name, Object value) throws NoSuchFieldException, IllegalAccessException {
        Class<?> clazz = this.getClass();
        Field field = clazz.getDeclaredField(name);
        field.setAccessible(true);
        field.set(this, value);
    }

    public Map<String, Object> getNonNullNamesAndValues(Object object) throws EntityException {
        Map<String, Object> map = new HashMap<>();
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            if (field.isAnnotationPresent(JdbcField.class) && !field.isAnnotationPresent(JdbcAutoGenerated.class)) {
                field.setAccessible(true);
                try {
                    Object value = field.get(object);
                    if (value != null) {
                        JdbcField jdbcField = field.getAnnotation(JdbcField.class);
                        map.put(jdbcField.value(), value);
                    } else {
                        if (field.isAnnotationPresent(JdbcNotNull.class)) {
                            throw new EntityException("null value on NotNull field: " + field.getName());
                        }
                    }
                } catch (IllegalAccessException e) {
                    throw new EntityException("Illegal access");
                }
            }
        }
        return map;
    }
}
